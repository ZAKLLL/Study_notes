# 注解

+ **@Configuration**注解

  + 指示一个类声明了一个或多个@Bean方法，并且可以由Spring容器进行处理以在运行时为这些bean生成bean定义和服务请求，例如：
    

    ```java
       @Configuration
       public class AppConfig {  
    	   @Bean
    	   public MyBean myBean() {
        	   // instantiate, configure and return bean ...
    	   }
       }
    ```
    引导@Configuration类
    通过AnnotationConfigApplicationContext
    通常使用AnnotationConfigApplicationContext或其支持Web的变体AnnotationConfigWebApplicationContext来引导@Configuration类。 前者的一个简单示例如下：

       ```java
       AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
       ctx.register(AppConfig.class);
       ctx.refresh();
       MyBean myBean = ctx.getBean(MyBean.class);
       // use myBean ...
       ```

  + **@Configuration(proxyBeanMethods = false)**

    + 在这里，proxyBeanMethods将保证'sharedService'方法被拦截，其结果被重复使用。如果按照正常的java逻辑，当调用serviceA()和serviceB()时，会有两个不同的ServiceC实例，而当直接调用sharedService()时，会创建第三个实例。那么代理拦截器会确保实际方法只被调用一次，所以只创建一个共享ServiceC的实例，ServiceA和ServiceB都会得到共享实例。
    + ```java
      @Configuration(proxyBeanMethods=true)
      public class SomeConfiguration {
        @Bean
        ServiceA serviceA(){
          return new ServiceA(sharedService());
        }
      
        @Bean
        ServiceB serviceB(){
          return new ServiceB(sharedService());
        }
      
        @Bean
        ServiceC sharedService(){
          return new ServiceC();
        }
      }
      ```

      或者使用下面的方式,不对sharedService()进行代理拦截,自动从Bean容器中获取**sharedService**并进行注入。
    
    + ```java
      @Configuration(proxyBeanMethods=false)
      public class SomeSmarterConfiguration {
      
          @Bean
          ServiceC sharedService(){
            return new ServiceC();
          }
      
          @Bean
          ServiceA serviceA(ServiceC sharedService){
            return new ServiceA(sharedService);
          }
      
          @Bean
          ServiceB serviceB(ServiceC sharedService){
            return new ServiceB(sharedService);
          }
      }
      ```

+ 使用**@import**导入配置类：

  + With the @Import annotation
    @Configuration类可以使用@Import注释组成，类似于<import>在Spring XML中的工作方式。 因为@Configuration对象作为容器中的Spring bean管理，所以可以注入导入的配置-例如，通过构造函数注入：

    ```java
           //@Configuration (当compponentScan没有扫描到该类时候,@Import可以将该类注入concext容器)
           public class DatabaseConfig {
               @Bean
               public DataSource dataSource() {
                   // instantiate, configure and return DataSource
               }
           }
    
           @Configuration
           @Import(DatabaseConfig.class)
           public class AppConfig {
    
               private final DatabaseConfig dataConfig;
              
               //自动注入构造函数参数
               public AppConfig(DatabaseConfig dataConfig) {
                   this.dataConfig = dataConfig;
               }
              
               @Bean
               public MyBean myBean() {
                   // reference the dataSource() bean method
                   return new MyBean(dataConfig.dataSource());
               }
           }
    ```
    
    
    
    现在，可以通过仅在Spring上下文中注册AppConfig来引导AppConfig和导入的DatabaseConfig：
    
    ```java
    new AnnotationConfigApplicationContext(AppConfig.class);
    ```
    
  + **@Profile**

    使用@Profile指定开发配置：

    带有@Profile批注
    @Configuration类可以用@Profile注释标记，以指示仅当给定的一个或多个配置文件处于活动状态时才应处理它们：

    ```java
       @Profile("development")
       @Configuration
       public class EmbeddedDatabaseConfig {
    
           @Bean
           public DataSource dataSource() {
               // instantiate, configure and return embedded DataSource
           }
    
       }
    
       @Profile("production")
       @Configuration
       public class ProductionDatabaseConfig {
           @Bean
           public DataSource dataSource() {
               // instantiate, configure and return production DataSource
           }
    
       }
    ```

    另外，您也可以在@Bean方法级别声明配置文件条件-例如，对于同一配置类中的替代bean变体：

       ```java
       @Configuration
       public class ProfileDatabaseConfig {
    
           @Bean("dataSource")
           @Profile("development")
           public DataSource embeddedDatabase() { ... }
          
           @Bean("dataSource")
           @Profile("production")
           public DataSource productionDatabase() { ... }
    
       }
       ```

  + 嵌套配置类

    + @Configuration classes may be nested within one another as follows:

      ```java
         @Configuration
         public class AppConfig {
      
             @Inject DataSource dataSource;
            
             @Bean
             public MyBean myBean() {
                 return new MyBean(dataSource);
             }
            
             @Configuration
             static class DatabaseConfig {
                 @Bean
                 DataSource dataSource() {
                     return new EmbeddedDatabaseBuilder().build();
                 }
             }
      
         }
      ```

      在引导这种安排时，仅需要针对应用程序上下文注册AppConfig。 由于是嵌套的@Configuration类，因此将自动注册DatabaseConfig。 当AppConfig和DatabaseConfig之间的关系已经隐式清除时，这避免了使用@Import批注的需要。
      还要注意，嵌套的@Configuration类可以与@Profile批注一起使用，为封闭的@Configuration类提供同一bean的两个选项。
    
  + **@PropertySource**

    ​		加载指定的属性文件（*.properties）到 Spring 的 Environment 中。可以配合 @Value 和 @ConfigurationProperties 使用。

    - @PropertySource 和 @Value 组合使用，可以将自定义属性文件中的属性变量值注入到当前类的使用@Value注解的成员变量中。

    - @PropertySource 和 @ConfigurationProperties 组合使用，可以将属性文件与一个Java类绑定，将属性文件中的变量值注入到该Java类的成员变量中。

    - 使用示例 @PropertySource + @Value 

      demo.properties:

      ```properties
      demo.name=huang
      demo.sex=1
      demo.type=demo
      ```

      ```java
      import org.springframework.beans.factory.annotation.Value;
      import org.springframework.context.annotation.PropertySource;
      import org.springframework.stereotype.Component;
      
      @Component
      @PropertySource(value = {"demo/props/demo.properties"})
      public class ReadByPropertySourceAndValue {
      
          @Value("${demo.name}")
          private String name;
      
          @Value("${demo.sex}")
          private int sex;
      
          @Value("${demo.type}")
          private String type;
      }
      ```

    - @PropertySource 和 @ConfigurationProperties 

      ```java
      import org.springframework.boot.context.properties.ConfigurationProperties;
      import org.springframework.context.annotation.PropertySource;
      import org.springframework.stereotype.Component;
      
      @Component
      @PropertySource(value = {"demo/props/demo.properties"})
      @ConfigurationProperties(prefix = "demo")
      @Data
      public class ReadByPropertySourceAndConfProperties {
      
          private String name;
      
          private int sex;
      
          private String type;
      
      }
      ```

      







### 使用@ConfigurationProperties

编写application.yml/application.properties文件(更改默认设置例如tomcat端口)

application.yml(冒号后一定要有空格，使用空格缩进，不要使用tab)

```yml
person:
    username: 周振昭
    age: 12
    birth: 2019/11/11
    map: {k1: jiji,k2: didi}
    list:
        - list1
        - list2
    dog:
     dogname: zhouzhou
     age: 12

```



```java
@Component
@ConfigurationProperties(prefix = "person")//对该javabean类进行注入
public class Person {
    private String username;
    private Integer age;
    private Date birth;
    private Map<String, String> map;
    private List<String> list;
    private Dog dog;

    
    class Dog{
        private String dogname;
        private Integer age;
    }
```

 ### @value注解(使用${spel}表达式)

```java
public class Person {
    @Value("${person.username}")
    private String username;
    private Integer age;
    private Date birth;
    private Map<String, String> map;
    private List<String> list;
    private Dog dog;

    
    class Dog{
        private String dogname;
        private Integer age;
    }
    
}
//--------或者如下

  @Value("${person.username}")
    private String name;
    @Test
    public void Val() {
        System.out.println(name);
    }   
```

### @**Configuration**(用来代替编写sprin.xml配置文件，SpringBoot推荐写法)

```java
@Configuration //声明该类为配置类，不用编写spring.xml配置文件了
public class MyConfig {

    @Bean   //类比为<beans>中<bean>的角色,bean中id即为方法名userService
    public UserService userService() {
        return new UserService();
    }
}

//测试---
@Autowired
    ApplicationContext ioc;

    @Test
    public void TestConfg() {
        System.out.println(ioc.containsBean("userService"));
    }
//output :true 证明该UserService已经以userService的id名放入了Spring容器
```

如果采用传统spring配置：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

 <bean id="helloService" class="com.atguigu.springboot.service.HelloService"></bean>
</beans>
```

并且要在一个配置类(主配置类)上添加@ImportResource注解

```java
@ImportResource(locations = {"classpath:beans.xml"})
@SpringBootApplication
public class HelloworldApplication {
	  public static void main(String[] args) {
        SpringApplication.run(HelloworldApplication.class, args);
    }

}
```

